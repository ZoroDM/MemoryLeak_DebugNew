# !/usr/bin/python
# NOTE: the disclaimer also functions for this file!
disclaimer = """\
/* Copyright (c) 2015-2016 Griefer@Work (https://sourceforge.net/users/grieferatwork) *
 *                                                                                    *
 * This software is provided 'as-is', without any express or implied                  *
 * warranty. In no event will the authors be held liable for any damages              *
 * arising from the use of this software.                                             *
 *                                                                                    *
 * Permission is granted to anyone to use this software for any purpose,              *
 * including commercial applications, and to alter it and redistribute it             *
 * freely, subject to the following restrictions:                                     *
 *                                                                                    *
 * 1. The origin of this software must not be misrepresented; you must not            *
 *    claim that you wrote the original software. If you use this software            *
 *    in a product, an acknowledgement in the product documentation would be          *
 *    appreciated but is not required.                                                *
 * 2. Altered source versions must be plainly marked as such, and must not be         *
 *    misrepresented as being the original software.                                  *
 * 3. This notice may not be removed or altered from any source distribution.         *
 */
"""
from time import localtime, strftime
import sys
import os

max_recursion      = 25
disable_name       = "DEBUG_NEW_PRIVATE_DISABLED" # Previously "_DEBUG_NEW_DISABLED"

disable_filename = "debug_new_disable.inl"
enable_filename  = "debug_new_enable.inl"

script_name = os.path.basename(sys.argv[0])
cout = open(disable_filename,"w")
def l(x):
 cout.write(x.rstrip())
 cout.write("\n")

def head(): 
 cout.write(disclaimer)
 l("                                                                         ")
 l("/*                                                                       ")
 l(" *                                                                       ")
 l(" * This is an auto generated file.                                       ")
 l(" * Changes to this file will be                                          ")
 l(" * overwritten without any warning.                                      ")
 l(" *                                                                       ")
 l(" * To change this file, please change                                    ")
 l(" * \""+script_name+"\" instead                                           ")
 l(" *                                                                       ")
 l(" * Generated at:                                                         ")
 l(" *   "+strftime("%a, %d %b %Y %H:%M:%S",localtime())+"                   ")
 l(" *                                                                       ")
 l(" */                                                                      ")
 l("                                                                         ")
def undef_debug_new_extensions(space):
 l("#"+space+"ifdef __cplusplus                                              ")
 l("#"+space+" undef placement                                               ")
 l("#"+space+"endif /* __cplusplus */                                        ")
 l("#"+space+"undef mstate_push                                              ")
 l("#"+space+"undef mstate_pop                                               ")
 l("#"+space+"undef mstate_global_push                                       ")
 l("#"+space+"undef mstate_global_pop                                        ")
 l("#"+space+"if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                        ")
 l("#"+space+" undef mallocf                                                 ")
 l("#"+space+" undef reallocf                                                ")
 l("#"+space+" undef callocf                                                 ")
 l("#"+space+" undef vmallocf                                                ")
 l("#"+space+" undef vreallocf                                               ")
 l("#"+space+" undef vcallocf                                                ")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                            ")
 l("#"+space+"  undef mallocf_nz                                             ")
 l("#"+space+"  undef reallocf_nz                                            ")
 l("#"+space+"  undef reallocf_nn                                            ")
 l("#"+space+"  undef reallocf_nnz                                           ")
 l("#"+space+"  undef callocf_nz                                             ")
 l("#"+space+"  undef vmallocf_nz                                            ")
 l("#"+space+"  undef vreallocf_nz                                           ")
 l("#"+space+"  undef vreallocf_nn                                           ")
 l("#"+space+"  undef vreallocf_nnz                                          ")
 l("#"+space+"  undef vcallocf_nz                                            ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                   ")
 l("#"+space+"endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */               ")
 l("#"+space+"if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                             ")
 l("#"+space+" undef malloc_nz                                               ")
 l("#"+space+" undef realloc_nz                                              ")
 l("#"+space+" undef realloc_nn                                              ")
 l("#"+space+" undef realloc_nnz                                             ")
 l("#"+space+" undef calloc_nz                                               ")
 l("#"+space+" undef free_nn                                                 ")
 l("#"+space+" undef strdup_nz                                               ")
 l("#"+space+" undef strndup_nz                                              ")
 l("#"+space+" undef wcsdup_nz                                               ")
 l("#"+space+" undef wcsndup_nz                                              ")
 l("#"+space+" undef mbsdup_nz                                               ")
 l("#"+space+" undef mbsndup_nz                                              ")
 l("#"+space+"endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                    ")
 l("#"+space+"if DEBUG_NEW_CONFIG_HAVE_MALLOC_MSIZE                          ")
 l("#"+space+" undef malloc_msize                                            ")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                            ")
 l("#"+space+"  undef malloc_msize_nn                                        ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                   ")
 l("#"+space+"endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_MSIZE */                 ")
 l("#"+space+"if DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC                        ")
 l("#"+space+" undef aligned_malloc                                          ")
 l("#"+space+" undef aligned_calloc                                          ")
 l("#"+space+" undef aligned_realloc                                         ")
 l("#"+space+" ifdef DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE                      ")
 l("#"+space+"  undef aligned_malloc_msize                                   ")
 l("#"+space+" endif /* DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE */                ")
 l("#"+space+" undef aligned_offset_malloc                                   ")
 l("#"+space+" undef aligned_offset_calloc                                   ")
 l("#"+space+" undef aligned_offset_realloc                                  ")
 l("#"+space+" ifdef DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE               ")
 l("#"+space+"  undef aligned_offset_malloc_msize                            ")
 l("#"+space+" endif /*DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE */          ")
 l("#"+space+" undef aligned_free                                            ")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                            ")
 l("#"+space+"  undef aligned_malloc_nz                                      ")
 l("#"+space+"  undef aligned_calloc_nz                                      ")
 l("#"+space+"  undef aligned_realloc_nz                                     ")
 l("#"+space+"  undef aligned_realloc_nn                                     ")
 l("#"+space+"  undef aligned_realloc_nnz                                    ")
 l("#"+space+"  ifdef DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE_NN                  ")
 l("#"+space+"   undef aligned_malloc_msize_nn                               ")
 l("#"+space+"  endif /* DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE_NN */            ")
 l("#"+space+"  undef aligned_offset_malloc_nz                               ")
 l("#"+space+"  undef aligned_offset_calloc_nz                               ")
 l("#"+space+"  undef aligned_offset_realloc_nz                              ")
 l("#"+space+"  undef aligned_offset_realloc_nn                              ")
 l("#"+space+"  undef aligned_offset_realloc_nnz                             ")
 l("#"+space+"  ifdef DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE_NN           ")
 l("#"+space+"   undef aligned_offset_malloc_msize_nn                        ")
 l("#"+space+"  endif /* DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE_NN */     ")
 l("#"+space+"  undef aligned_free_nn                                        ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                   ")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                       ")
 l("#"+space+"  undef aligned_mallocf                                        ")
 l("#"+space+"  undef aligned_callocf                                        ")
 l("#"+space+"  undef aligned_reallocf                                       ")
 l("#"+space+"  undef aligned_offset_mallocf                                 ")
 l("#"+space+"  undef aligned_offset_callocf                                 ")
 l("#"+space+"  undef aligned_offset_reallocf                                ")
 l("#"+space+"  undef valigned_mallocf                                       ")
 l("#"+space+"  undef valigned_callocf                                       ")
 l("#"+space+"  undef valigned_reallocf                                      ")
 l("#"+space+"  undef valigned_offset_mallocf                                ")
 l("#"+space+"  undef valigned_offset_callocf                                ")
 l("#"+space+"  undef valigned_offset_reallocf                               ")
 l("#"+space+"  if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                           ")
 l("#"+space+"   undef aligned_mallocf_nz                                    ")
 l("#"+space+"   undef aligned_callocf_nz                                    ")
 l("#"+space+"   undef aligned_reallocf_nz                                   ")
 l("#"+space+"   undef aligned_reallocf_nn                                   ")
 l("#"+space+"   undef aligned_reallocf_nnz                                  ")
 l("#"+space+"   undef aligned_offset_mallocf_nz                             ")
 l("#"+space+"   undef aligned_offset_callocf_nz                             ")
 l("#"+space+"   undef aligned_offset_reallocf_nz                            ")
 l("#"+space+"   undef aligned_offset_reallocf_nn                            ")
 l("#"+space+"   undef aligned_offset_reallocf_nnz                           ")
 l("#"+space+"   undef valigned_mallocf_nz                                   ")
 l("#"+space+"   undef valigned_callocf_nz                                   ")
 l("#"+space+"   undef valigned_reallocf_nz                                  ")
 l("#"+space+"   undef valigned_reallocf_nn                                  ")
 l("#"+space+"   undef valigned_reallocf_nnz                                 ")
 l("#"+space+"   undef valigned_offset_mallocf_nz                            ")
 l("#"+space+"   undef valigned_offset_callocf_nz                            ")
 l("#"+space+"   undef valigned_offset_reallocf_nz                           ")
 l("#"+space+"   undef valigned_offset_reallocf_nn                           ")
 l("#"+space+"   undef valigned_offset_reallocf_nnz                          ")
 l("#"+space+"  endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                  ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */              ")
 l("#"+space+"endif /* DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC */               ")
def undef_debug_new_overwrites(space):
 l("#"+space+"ifdef __cplusplus                                              ")
 l("#"+space+" undef new                                                     ")
 l("#"+space+"endif /* __cplusplus */                                        ")
 l("#"+space+"if DEBUG_NEW_CONFIG_ENABLED || !defined(DEBUG_NEW_CONFIG_USE_C_MALLOC)")
 l("#"+space+" undef malloc                                                  ")
 l("#"+space+" undef free                                                    ")
 l("#"+space+" undef realloc                                                 ")
 l("#"+space+" undef calloc                                                  ")
 l("#"+space+" undef strdup                                                  ")
 l("#"+space+" undef strndup                                                 ")
 l("#"+space+" undef wcsdup                                                  ")
 l("#"+space+" undef wcsndup                                                 ")
 l("#"+space+" undef mbsdup                                                  ")
 l("#"+space+" undef mbsndup                                                 ")
 l("#"+space+" undef _strdup                                                 ")
 l("#"+space+" undef _wcsdup                                                 ")
 l("#"+space+" undef _mbsdup                                                 ")
 l("#"+space+" if DEBUG_NEW_COMPILER_HAVE_MSVC_ALIGNED_MALLOC && DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC         ")
 l("#"+space+"  undef _aligned_free                                          ")
 l("#"+space+"  undef _aligned_malloc                                        ")
 l("#"+space+"  undef _aligned_offset_malloc                                 ")
 l("#"+space+"  undef _aligned_realloc                                       ")
 l("#"+space+"  undef _aligned_offset_realloc                                ")
 l("#"+space+"  undef _aligned_msize                                         ")
 l("#"+space+" endif /* DEBUG_NEW_COMPILER_HAVE_MSVC_ALIGNED_MALLOC && DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC */")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_POSIX_MALLOC_USABLE_SIZE             ")
 l("#"+space+"  undef malloc_usable_size                                     ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_POSIX_MALLOC_USABLE_SIZE */    ")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_MSVC_MSIZE                           ")
 l("#"+space+"  undef _msize                                                 ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_MSVC_MSIZE */                  ")
 l("#"+space+" if DEBUG_NEW_CONFIG_HAVE_APPLE_MALLOC_SIZE                    ")
 l("#"+space+"  undef malloc_size                                            ")
 l("#"+space+" endif /* DEBUG_NEW_CONFIG_HAVE_APPLE_MALLOC_SIZE */           ")
 l("#"+space+"endif /* DEBUG_NEW_CONFIG_ENABLED || !DEBUG_NEW_CONFIG_USE_C_MALLOC */")
 

head()
l("#if !defined("+disable_name+") || defined(DEBUG_NEW_PRIVATE_WANT_QUICK_DISABLED)")
l("#ifdef GUARD_DEBUG_NEW_H                                                  ")
l("#ifndef DEBUG_NEW_PRIVATE_WANT_QUICK_DISABLED                             ")
l("#define "+disable_name+" 1                                                ")
undef_debug_new_extensions("")
l("#if DEBUG_NEW_CONFIG_HAVE_OVERWRITE_APIS                                  ")
undef_debug_new_overwrites(" ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_OVERWRITE_APIS */                         ")
l("#else /* !DEBUG_NEW_PRIVATE_WANT_QUICK_DISABLED */                        ")
l("#undef DEBUG_NEW_PRIVATE_WANT_QUICK_DISABLED                              ")
l("#endif /* !DEBUG_NEW_PRIVATE_WANT_QUICK_DISABLED */                       ")
l("#if DEBUG_NEW_CONFIG_LINK_EXTENSIONS_WHEN_DISABLED                        ")
l("//////////////////////////////////////////////////////////////////////////")
l("// Link extensions as stub / alias                                        ")
l("#ifdef __cplusplus                                                        ")
l("# define placement                  /* nothing */                         ")
l("#endif /* __cplusplus */                                                  ")
l("#define mstate_push()               1                                     ")
l("#define mstate_pop()                0                                     ")
l("#define mstate_global_push()        1                                     ")
l("#define mstate_global_pop()         0                                     ")
l("#if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                                  ")
l("# define mallocf(s,...)               malloc(s)                           ")
l("# define reallocf(p,s,...)            realloc(p,s)                        ")
l("# define callocf(n,s,...)             calloc(n,s)                         ")
l("# define vmallocf(s,fmt,args)         malloc(s)                           ")
l("# define vreallocf(p,s,fmt,args)      realloc(p,s)                        ")
l("# define vcallocf(n,s,fmt,args)       calloc(n,s)                         ")
l("# if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                      ")
l("#  define mallocf_nz(s,...)           malloc(s)                           ")
l("#  define reallocf_nz(p,s,...)        realloc(p,s)                        ")
l("#  define reallocf_nn(p,s,...)        realloc(p,s)                        ")
l("#  define reallocf_nnz(p,s,...)       realloc(p,s)                        ")
l("#  define callocf_nz(n,s,...)         calloc(n,s)                         ")
l("#  define vmallocf_nz(s,fmt,args)     malloc(s)                           ")
l("#  define vreallocf_nz(p,s,fmt,args)  realloc(p,s)                        ")
l("#  define vreallocf_nn(p,s,fmt,args)  realloc(p,s)                        ")
l("#  define vreallocf_nnz(p,s,fmt,args) realloc(p,s)                        ")
l("#  define vcallocf_nz(n,s,fmt,args)   calloc(n,s)                         ")
l("# endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                             ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */                         ")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                       ")
l("# define malloc_nz                    malloc                              ")
l("# define realloc_nz                   realloc                             ")
l("# define realloc_nn                   realloc                             ")
l("# define realloc_nnz                  realloc                             ")
l("# define calloc_nz                    calloc                              ")
l("# define free_nn                      free                                ")
l("# define strdup_nz                    strdup					                         ")
l("# define wcsdup_nz                    wcsdup					                         ")
l("# define mbsdup_nz                    mbsdup					                         ")
l("# define strndup_nz                   strndup					                        ")
l("# define wcsndup_nz                   wcsndup					                        ")
l("# define mbsndup_nz                   mbsndup					                        ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                              ")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_MSIZE                                    ")
l("# if DEBUG_NEW_CONFIG_HAVE_POSIX_MALLOC_USABLE_SIZE                       ")
l("#  define malloc_msize(p)             malloc_usable_size(DEBUG_NEW_CONST_CAST(void*)(p))")
l("# elif DEBUG_NEW_CONFIG_HAVE_MSVC_MSIZE                                   ")
l("#  define malloc_msize(p)             _msize(DEBUG_NEW_CONST_CAST(void*)(p))")
l("# elif DEBUG_NEW_CONFIG_HAVE_APPLE_MALLOC_SIZE                            ")
l("#  define malloc_msize(p)             malloc_size(DEBUG_NEW_CONST_CAST(void*)(p))")
l("# endif                                                                   ")
l("# if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                      ")
l("#  define malloc_msize_nn             malloc_msize                        ")
l("# endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                             ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_MSIZE */                           ")
l("#if DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC                                  ")
l("# define aligned_malloc                                 DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC")
l("# define aligned_calloc                                 DEBUG_NEW_API_NATIVE_ALIGNED_CALLOC")
l("# define aligned_realloc                                DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC")
l("# ifdef DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_MSIZE                         ")
l("#  define aligned_malloc_msize                          DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_MSIZE")
l("# endif /* DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_MSIZE */                   ")
l("# define aligned_offset_malloc                          DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC")
l("# define aligned_offset_calloc                          DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_CALLOC")
l("# define aligned_offset_realloc                         DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC")
l("# ifdef DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_MSIZE                  ")
l("#  define aligned_offset_malloc_msize                   DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_MSIZE")
l("# endif /* DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_MSIZE */            ")
l("# define aligned_free                                   DEBUG_NEW_API_NATIVE_ALIGNED_FREE")
l("# if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                      ")
l("#  define aligned_malloc_nz                             DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_NZ")
l("#  define aligned_calloc_nz                             DEBUG_NEW_API_NATIVE_ALIGNED_CALLOC_NZ")
l("#  define aligned_realloc_nz                            DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NZ")
l("#  define aligned_realloc_nn                            DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NN")
l("#  define aligned_realloc_nnz                           DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NNZ")
l("#  ifdef DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_MSIZE_NN                      ")
l("#   define aligned_malloc_msize_nn                      DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_MSIZE_NN")
l("#  endif /* DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_MSIZE_NN */                ")
l("#  define aligned_offset_malloc_nz                      DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_NZ")
l("#  define aligned_offset_calloc_nz                      DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_CALLOC_NZ")
l("#  define aligned_offset_realloc_nz                     DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NZ")
l("#  define aligned_offset_realloc_nn                     DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NN")
l("#  define aligned_offset_realloc_nnz                    DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NNZ")
l("#  ifdef DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_MSIZE_NN               ")
l("#   define aligned_offset_malloc_msize_nn               DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_MSIZE_NN")
l("#  endif /* DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_MSIZE_NN */         ")
l("#  define aligned_free_nn                               DEBUG_NEW_API_NATIVE_ALIGNED_FREE_NN")
l("# endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                             ")
l("# if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                                 ")
l("#  define aligned_mallocf(s,a,...)                      DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC(s,a)")
l("#  define aligned_callocf(s,a,...)                      DEBUG_NEW_API_NATIVE_ALIGNED_CALLOC(s,a)")
l("#  define aligned_reallocf(p,s,a,...)                   DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC(p,s,a)")
l("#  define aligned_offset_mallocf(s,a,o,...)             DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC(s,a,o)")
l("#  define aligned_offset_callocf(s,a,o,...)             DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_CALLOC(s,a,o)")
l("#  define aligned_offset_reallocf(p,s,a,o,...)          DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC(p,s,a,o)")
l("#  define valigned_mallocf(s,a,fmt,args)                DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC(s,a)")
l("#  define valigned_callocf(s,a,fmt,args)                DEBUG_NEW_API_NATIVE_ALIGNED_CALLOC(s,a)")
l("#  define valigned_reallocf(p,s,a,fmt,args)             DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC(p,s,a)")
l("#  define valigned_offset_mallocf(s,a,o,fmt,args)       DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC(s,a,o)")
l("#  define valigned_offset_callocf(s,a,o,fmt,args)       DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_CALLOC(s,a,o)")
l("#  define valigned_offset_reallocf(p,s,a,o,fmt,args)    DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC(p,s,a,o)")
l("#  if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                      ")
l("#   define aligned_mallocf_nz(s,a,...)                  DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_NZ(s,a)")
l("#   define aligned_callocf_nz(s,a,...)                  DEBUG_NEW_API_NATIVE_ALIGNED_CALLOC_NZ(s,a)")
l("#   define aligned_reallocf_nz(p,s,a,...)               DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NZ(p,s,a)")
l("#   define aligned_reallocf_nn(p,s,a,...)               DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NN(p,s,a)")
l("#   define aligned_reallocf_nnz(p,s,a,...)              DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NNZ(p,s,a)")
l("#   define aligned_offset_mallocf_nz(s,a,o,...)         DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_NZ(s,a,o)")
l("#   define aligned_offset_callocf_nz(s,a,o,...)         DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_CALLOC_NZ(s,a,o)")
l("#   define aligned_offset_reallocf_nz(p,s,a,o,...)      DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NZ(p,s,a,o)")
l("#   define aligned_offset_reallocf_nn(p,s,a,o,...)      DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NN(p,s,a,o)")
l("#   define aligned_offset_reallocf_nnz(p,s,a,o,...)     DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NNZ(p,s,a,o)")
l("#   define valigned_mallocf_nz(s,a,fmt,args)            DEBUG_NEW_API_NATIVE_ALIGNED_MALLOC_NZ(s,a)")
l("#   define valigned_callocf_nz(s,a,fmt,args)            DEBUG_NEW_API_NATIVE_ALIGNED_CALLOC_NZ(s,a)")
l("#   define valigned_reallocf_nz(p,s,a,fmt,args)         DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NZ(p,s,a)")
l("#   define valigned_reallocf_nn(p,s,a,fmt,args)         DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NN(p,s,a)")
l("#   define valigned_reallocf_nnz(p,s,a,fmt,args)        DEBUG_NEW_API_NATIVE_ALIGNED_REALLOC_NNZ(p,s,a)")
l("#   define valigned_offset_mallocf_nz(s,a,o,fmt,args)   DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_MALLOC_NZ(s,a,o)")
l("#   define valigned_offset_callocf_nz(s,a,o,fmt,args)   DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_CALLOC_NZ(s,a,o)")
l("#   define valigned_offset_reallocf_nz(p,s,a,o,fmt,args) DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NZ(p,s,a,o)")
l("#   define valigned_offset_reallocf_nn(p,s,a,o,fmt,args) DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NN(p,s,a,o)")
l("#   define valigned_offset_reallocf_nnz(p,s,a,o,fmt,args) DEBUG_NEW_API_NATIVE_ALIGNED_OFFSET_REALLOC_NNZ(p,s,a,o)")
l("#  endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                            ")
l("# endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */                        ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC */                         ")
l("#endif /* DEBUG_NEW_CONFIG_LINK_EXTENSIONS_WHEN_DISABLED */               ")
l("#else /* GUARD_DEBUG_NEW_H */                                             ")
l("# define "+disable_name+" 1                                               ")
l("#endif /* !GUARD_DEBUG_NEW_H */                                           ")
i = 1
while i < max_recursion:
 l("#elif "+disable_name+" == "+str(i)+"                                     ")
 l("# undef "+disable_name+"                                                 ")
 l("# define "+disable_name+" "+str(i+1)+"                                   ")
 i += 1
l("#else                                                                     ")
l("# error Too high recursion in debug_new enable/disable               \\   ")
l("  - Check for possible infinite-recursion, when including files      \\   ")
l("  - Reduce the complexity of you code                                \\   ")
l("  - Make sure every inclusion of <"+disable_filename+"> is followed \\    ")
l("    by an inclusion of <"+enable_filename+">                        \\    ")
l("  - Increase the \"max_recursion\" variable in \""+script_name+"\"        ")
l("#endif /* "+disable_name+" */                                             ")
cout.close()

cout = open(enable_filename,"w")
head()
l("#ifndef "+disable_name+"                                                  ")
l("#ifdef DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED                               ")
l("# define "+disable_name+" 1                                               ")
l("#else /* DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED */                          ")
l("/* define "+disable_name+" with an invalid value, to force a recursion error */")
l("# define "+disable_name+" "+str(max_recursion+1)+"                        ")
l("#endif /* !DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED */                        ")
l("#endif /* !"+disable_name+" */                                            ")
i = max_recursion
l("#if "+disable_name+" == "+str(i)+"                                        ")
l("# undef "+disable_name+"                                                  ")
while i > 1:
 l("# define "+disable_name+" "+str(i-1)+"                                   ")
 l("#elif "+disable_name+" == "+str(i-1)+"                                   ")
 l("# undef "+disable_name+"                                                 ")
 i -= 1
l("#ifdef GUARD_DEBUG_NEW_H                                                  ")
l("#if DEBUG_NEW_CONFIG_HAVE_OVERWRITE_APIS                                  ")
l("#ifndef DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED                              ")
undef_debug_new_overwrites(" ")
undef_debug_new_extensions(" ")
l("#else /* !DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED */                         ")
l("#undef DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED                               ")
l("#endif /* DEBUG_NEW_PRIVATE_WANT_QUICK_ENABLED */                         ")
l("//////////////////////////////////////////////////////////////////////////")
l("// Override native API Methods                                            ")
l("# if DEBUG_NEW_CONFIG_ENABLED && defined(DEBUG_NEW_CXX_NEW)               ")
l("#  define new                 DEBUG_NEW_CXX_NEW                           ")
l("# endif /* DEBUG_NEW_CONFIG_ENABLED && defined(DEBUG_NEW_CXX_NEW) */      ")
l("# if DEBUG_NEW_CONFIG_ENABLED || !defined(DEBUG_NEW_CONFIG_USE_C_MALLOC)  ")
l("#  define malloc              DEBUG_NEW_API_MALLOC                        ")
l("#  define free                DEBUG_NEW_API_FREE                          ")
l("#  define realloc             DEBUG_NEW_API_REALLOC                       ")
l("#  define calloc              DEBUG_NEW_API_CALLOC                        ")
l("#  define strdup              DEBUG_NEW_API_STRDUP                        ")
l("#  define strndup             DEBUG_NEW_API_STRNDUP                       ")
l("#  define wcsdup              DEBUG_NEW_API_WCSDUP                        ")
l("#  define wcsndup             DEBUG_NEW_API_WCSNDUP                       ")
l("#  define mbsdup              DEBUG_NEW_API_MBSDUP                        ")
l("#  define mbsndup             DEBUG_NEW_API_MBSNDUP                       ")
l("#  define _strdup             DEBUG_NEW_API_STRDUP                        ")
l("#  define _wcsdup             DEBUG_NEW_API_WCSDUP                        ")
l("#  define _mbsdup             DEBUG_NEW_API_MBSDUP                        ")
l("#  if DEBUG_NEW_COMPILER_HAVE_MSVC_ALIGNED_MALLOC && DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC         ")
l("#   define _aligned_free            DEBUG_NEW_API_ALIGNED_FREE               ")
l("#   define _aligned_malloc          DEBUG_NEW_API_ALIGNED_MALLOC             ")
l("#   define _aligned_offset_malloc   DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC      ")
l("#   define _aligned_realloc         DEBUG_NEW_API_ALIGNED_REALLOC            ")
l("#   define _aligned_offset_realloc  DEBUG_NEW_API_ALIGNED_OFFSET_REALLOC     ")
l("#   define _aligned_msize           DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE")
l("#  endif /* DEBUG_NEW_COMPILER_HAVE_MSVC_ALIGNED_MALLOC && DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC */")
l("#  if DEBUG_NEW_CONFIG_HAVE_POSIX_MALLOC_USABLE_SIZE                      ")
l("#   define malloc_usable_size DEBUG_NEW_API_MALLOC_MSIZE                  ")
l("#  endif /* DEBUG_NEW_CONFIG_HAVE_POSIX_MALLOC_USABLE_SIZE */             ")
l("#  if DEBUG_NEW_CONFIG_HAVE_MSVC_MSIZE                                    ")
l("#   define _msize             DEBUG_NEW_API_MALLOC_MSIZE                  ")
l("#  endif /* DEBUG_NEW_CONFIG_HAVE_MSVC_MSIZE */                           ")
l("#  if DEBUG_NEW_CONFIG_HAVE_APPLE_MALLOC_SIZE                             ")
l("#   define malloc_size        DEBUG_NEW_API_MALLOC_MSIZE_C                ")
l("#  endif /* DEBUG_NEW_CONFIG_HAVE_APPLE_MALLOC_SIZE */                    ")
l("# endif /* DEBUG_NEW_CONFIG_ENABLED || !DEBUG_NEW_CONFIG_USE_C_MALLOC */  ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_OVERWRITE_APIS */                         ")
l("                                                                          ")
l("#ifdef DEBUG_NEW_CXX_PLACEMENT                                            ")
l("//////////////////////////////////////////////////////////////////////////")
l("// <<placement>>                                                          ")
l("//   - indicator keyword for placement new                                ")
l("//   - Because of the way I overwrite the new keyword, to add file, line, ")
l("//     expr and func information, I have problems detecting placement new calls:")
l("//     >> int *x = (int *)malloc(sizeof(int));                            ")
l("//     >>  placement new(x) int(42); //< when calling a placement new,    ")
l("//     >>                            //  add the keyword \"placement\"    ")
l("//     >>                            //  in front of it.                  ")
l("//     >> free(x);                                                        ")
l("//   - since this is not a standard keyword --> allways overwritten       ")
l("//   - If debug_new is disabled, \"placement\" will expand to nothing     ")
l("//////////////////////////////////////////////////////////////////////////")
l("#define placement            DEBUG_NEW_CXX_PLACEMENT                      ")
l("#endif /* DEBUG_NEW_CXX_PLACEMENT */                                      ")
l("                                                                          ")
l("//////////////////////////////////////////////////////////////////////////")
l("// <<Memory state macros>>                                                ")
l("//  - When programming, a single-threaded application,                    ")
l("//    it doesn't matter, if you use:                                      ")
l("//    - \"mstate_push()\" or \"mstate_global_push()\" for pushing         ")
l("//    - \"mstate_pop()\" or \"mstate_global_pop()\" for popping           ")
l("//    - this is useful, when executing test code and                      ")
l("//      debugging memory leaks, without exiting the application:          ")
l("//    >> void some_func(void) {                                           ")
l("//    >>  mstate_push();                                                  ")
l("//    >>   int *x = new int[42];                                          ")
l("//    >>   int *y = new int();                                            ")
l("//    >>  mstate_pop(); //< memory differences between here and           ")
l("//    >>                //  and the last call to \"mstate_push()\"        ")
l("//    >>                //  will be listed (if any)                       ")
l("//    >> }                                                                ")
l("//  - When programming, a multi-threaded application,                     ")
l("//    - \"mstate_push()\" is used, to push the state of the current thread")
l("//    - \"mstate_pop()\" is used, to pop it                               ")
l("//    - \"mstate_global_push()\", to push the global application state.   ")
l("//    - \"mstate_global_pop()\", to pop it                                ")
l("//    - This differentiation is required, to safely test code running     ")
l("//      is a multi-threaded application and debug memory-leaks associated ")
l("//      with the execution of threads:                                    ")
l("//     >> void ThreadA(void) {                                            ")
l("//     >>  mstate_push();                                                 ")
l("//     >>   int *x = new int[42];                                         ")
l("//     >>   int *y = new int();                                           ")
l("//     >>  mstate_pop();                                                  ")
l("//     >> }                                                               ")
l("//     >> void ThreadB(void) {                                            ")
l("//     >>  mstate_push();                                                 ")
l("//     >>   int *x = new int[123];                                        ")
l("//     >>   int *y = new int();                                           ")
l("//     >>  mstate_pop();                                                  ")
l("//     >> }                                                               ")
l("//     >> // ThreadA and ThreadB                                          ")
l("//     >> // can run in parallel;                                         ")
l("//     >> void main_thread_launcher(void) {                               ")
l("//     >>  mstate_global_push();                                          ")
l("//     >>   MagicThread<ThreadA>::launch();                               ")
l("//     >>   MagicThread<ThreadB>::launch();                               ")
l("//     >>  mstate_global_pop();                                           ")
l("//     >>  // ^ using global push and pop,                                ")
l("//     >>  //   because we are the main thread                            ")
l("//     >>  //   this way we get information                               ")
l("//     >>  //   about leaks, that may have occurred, in \"MagicThread\"   ")
l("//     >> }                                                               ")
l("//////////////////////////////////////////////////////////////////////////")
l("#define mstate_push          DEBUG_NEW_API_MSTATE_PUSH                    ")
l("#define mstate_pop           DEBUG_NEW_API_MSTATE_POP                     ")
l("#define mstate_global_push   DEBUG_NEW_API_MSTATE_GLOBAL_PUSH             ")
l("#define mstate_global_pop    DEBUG_NEW_API_MSTATE_GLOBAL_POP              ")
l("                                                                          ")
l("#if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                                  ")
l("//////////////////////////////////////////////////////////////////////////")
l("// Formatted allocation functions                                         ")
l("#define mallocf              DEBUG_NEW_API_MALLOCF                        ")
l("#define reallocf             DEBUG_NEW_API_REALLOCF                       ")
l("#define callocf              DEBUG_NEW_API_CALLOCF                        ")
l("#define vmallocf             DEBUG_NEW_API_VMALLOCF                       ")
l("#define vreallocf            DEBUG_NEW_API_VREALLOCF                      ")
l("#define vcallocf             DEBUG_NEW_API_VCALLOCF                       ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */                         ")
l("                                                                          ")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                       ")
l("//////////////////////////////////////////////////////////////////////////")
l("// Optimized allocation functions (improve allocation speed, by reducing parameter checks)")
l("// --> *_nz  : Size parameter may not be ZERO                             ")
l("// --> *_nn  : Pointer parameter may not be NULL                          ")
l("// --> *_nnz : Both of the above                                          ")
l("#define malloc_nz            DEBUG_NEW_API_MALLOC_NZ                      ")
l("#define realloc_nz           DEBUG_NEW_API_REALLOC_NZ                     ")
l("#define realloc_nn           DEBUG_NEW_API_REALLOC_NN                     ")
l("#define realloc_nnz          DEBUG_NEW_API_REALLOC_NNZ                    ")
l("#define calloc_nz            DEBUG_NEW_API_CALLOC_NZ                      ")
l("#define free_nn              DEBUG_NEW_API_FREE_NN                        ")
l("#define strdup_nz            DEBUG_NEW_API_STRDUP_NZ					                 ")
l("#define wcsdup_nz            DEBUG_NEW_API_WCSDUP_NZ					                 ")
l("#define mbsdup_nz            DEBUG_NEW_API_MBSDUP_NZ					                 ")
l("#define strndup_nz           DEBUG_NEW_API_STRNDUP_NZ					                ")
l("#define wcsndup_nz           DEBUG_NEW_API_WCSNDUP_NZ					                ")
l("#define mbsndup_nz           DEBUG_NEW_API_MBSNDUP_NZ					                ")
l("#if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                                  ")
l("#define mallocf_nz           DEBUG_NEW_API_MALLOCF_NZ                     ")
l("#define reallocf_nz          DEBUG_NEW_API_REALLOCF_NZ                    ")
l("#define reallocf_nn          DEBUG_NEW_API_REALLOCF_NN                    ")
l("#define reallocf_nnz         DEBUG_NEW_API_REALLOCF_NNZ                   ")
l("#define callocf_nz           DEBUG_NEW_API_CALLOCF_NZ                     ")
l("#define vmallocf_nz          DEBUG_NEW_API_VMALLOCF_NZ                    ")
l("#define vreallocf_nz         DEBUG_NEW_API_VREALLOCF_NZ                   ")
l("#define vreallocf_nn         DEBUG_NEW_API_VREALLOCF_NN                   ")
l("#define vreallocf_nnz        DEBUG_NEW_API_VREALLOCF_NNZ                  ")
l("#define vcallocf_nz          DEBUG_NEW_API_VCALLOCF_NZ                    ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */                         ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                              ")
l("                                                                          ")
l("//////////////////////////////////////////////////////////////////////////")
l("// malloc_msize returns the size of a given memory block                  ")
l("// By default this extension will only be provided, if the current        ")
l("// platform is naturally able, to provide such feature.                   ")
l("// - To make sure you code is portable, you                               ")
l("//   can always test for this extensions:                                 ")
l("// >> void *p = malloc(42);                                               ")
l("// >> #ifdef malloc_msize                                                 ")
l("// >> size_t s = malloc_msize(p);                                         ")
l("// >> #endif /* malloc_msize */                                           ")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_MSIZE                                    ")
l("# define malloc_msize        DEBUG_NEW_API_MALLOC_MSIZE_C                 ")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                       ")
l("# define malloc_msize_nn     DEBUG_NEW_API_MALLOC_MSIZE_C_NN              ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                              ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_MSIZE */                           ")
l("                                                                          ")
l("//////////////////////////////////////////////////////////////////////////")
l("// aligned_malloc and his friends can be used, to                         ")
l("// allocate memory aligned by a custom degree in its address.             ")
l("// e.g.:                                                                  ")
l("// >> void *p = aligned_malloc(16,64); // optimize to aligned_malloc_nz   ")
l("// >> if (p) {                                                            ")
l("// >>  assert((uintptr_t)p % 64 == 0);                                    ")
l("// >>  aligned_free(p); // optimize to aligned_free_nn                    ")
l("// >> }                                                                   ")
l("// NOTE: When using aligned_malloc_msize portably, you must still         ")
l("//       check for its availability by checking, if it is defined as a macro:")
l("//    >> #ifdef aligned_malloc_msize                                      ")
l("//    >>  ... // Code that uses aligned_malloc_msize                      ")
l("//    >> #endif /* aligned_malloc_msize */                                ")
l("#if DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC                                  ")
l("#define aligned_malloc                 DEBUG_NEW_API_ALIGNED_MALLOC       ")
l("#define aligned_calloc                 DEBUG_NEW_API_ALIGNED_CALLOC       ")
l("#define aligned_realloc                DEBUG_NEW_API_ALIGNED_REALLOC      ")
l("#ifdef DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE                                 ")
l("#define aligned_malloc_msize           DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE ")
l("#endif /* DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE */                           ")
l("#define aligned_offset_malloc          DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC")
l("#define aligned_offset_calloc          DEBUG_NEW_API_ALIGNED_OFFSET_CALLOC")
l("#define aligned_offset_realloc         DEBUG_NEW_API_ALIGNED_OFFSET_REALLOC")
l("#ifdef DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE                          ")
l("#define aligned_offset_malloc_msize    DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE")
l("#endif /*DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE */                     ")
l("#define aligned_free                   DEBUG_NEW_API_ALIGNED_FREE         ")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                       ")
l("#define aligned_malloc_nz              DEBUG_NEW_API_ALIGNED_MALLOC_NZ    ")
l("#define aligned_calloc_nz              DEBUG_NEW_API_ALIGNED_CALLOC_NZ    ")
l("#define aligned_realloc_nz             DEBUG_NEW_API_ALIGNED_REALLOC_NZ   ")
l("#define aligned_realloc_nn             DEBUG_NEW_API_ALIGNED_REALLOC_NN   ")
l("#define aligned_realloc_nnz            DEBUG_NEW_API_ALIGNED_REALLOC_NNZ  ")
l("#ifdef DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE_NN                              ")
l("#define aligned_malloc_msize_nn        DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE_NN")
l("#endif /* DEBUG_NEW_API_ALIGNED_MALLOC_MSIZE_NN */                        ")
l("#define aligned_offset_malloc_nz       DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_NZ")
l("#define aligned_offset_calloc_nz       DEBUG_NEW_API_ALIGNED_OFFSET_CALLOC_NZ")
l("#define aligned_offset_realloc_nz      DEBUG_NEW_API_ALIGNED_OFFSET_REALLOC_NZ")
l("#define aligned_offset_realloc_nn      DEBUG_NEW_API_ALIGNED_OFFSET_REALLOC_NN")
l("#define aligned_offset_realloc_nnz     DEBUG_NEW_API_ALIGNED_OFFSET_REALLOC_NNZ")
l("#ifdef DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE_NN                       ")
l("#define aligned_offset_malloc_msize_nn DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE_NN")
l("#endif /* DEBUG_NEW_API_ALIGNED_OFFSET_MALLOC_MSIZE_NN */                 ")
l("#define aligned_free_nn                DEBUG_NEW_API_ALIGNED_FREE_NN      ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                              ")
l("#if DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0                                  ")
l("#define aligned_mallocf                DEBUG_NEW_API_ALIGNED_MALLOCF      ")
l("#define aligned_callocf                DEBUG_NEW_API_ALIGNED_CALLOCF      ")
l("#define aligned_reallocf               DEBUG_NEW_API_ALIGNED_REALLOCF     ")
l("#define aligned_offset_mallocf         DEBUG_NEW_API_ALIGNED_OFFSET_MALLOCF")
l("#define aligned_offset_callocf         DEBUG_NEW_API_ALIGNED_OFFSET_CALLOCF")
l("#define aligned_offset_reallocf        DEBUG_NEW_API_ALIGNED_OFFSET_REALLOCF")
l("#define valigned_mallocf               DEBUG_NEW_API_VALIGNED_MALLOCF     ")
l("#define valigned_callocf               DEBUG_NEW_API_VALIGNED_CALLOCF     ")
l("#define valigned_reallocf              DEBUG_NEW_API_VALIGNED_REALLOCF    ")
l("#define valigned_offset_mallocf        DEBUG_NEW_API_VALIGNED_OFFSET_MALLOCF")
l("#define valigned_offset_callocf        DEBUG_NEW_API_VALIGNED_OFFSET_CALLOCF")
l("#define valigned_offset_reallocf       DEBUG_NEW_API_VALIGNED_OFFSET_REALLOCF")
l("#if DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ                                       ")
l("#define aligned_mallocf_nz             DEBUG_NEW_API_ALIGNED_MALLOCF_NZ   ")
l("#define aligned_callocf_nz             DEBUG_NEW_API_ALIGNED_CALLOCF_NZ   ")
l("#define aligned_reallocf_nz            DEBUG_NEW_API_ALIGNED_REALLOCF_NZ  ")
l("#define aligned_reallocf_nn            DEBUG_NEW_API_ALIGNED_REALLOCF_NN  ")
l("#define aligned_reallocf_nnz           DEBUG_NEW_API_ALIGNED_REALLOCF_NNZ ")
l("#define aligned_offset_mallocf_nz      DEBUG_NEW_API_ALIGNED_OFFSET_MALLOCF_NZ")
l("#define aligned_offset_callocf_nz      DEBUG_NEW_API_ALIGNED_OFFSET_CALLOCF_NZ")
l("#define aligned_offset_reallocf_nz     DEBUG_NEW_API_ALIGNED_OFFSET_REALLOCF_NZ")
l("#define aligned_offset_reallocf_nn     DEBUG_NEW_API_ALIGNED_OFFSET_REALLOCF_NN")
l("#define aligned_offset_reallocf_nnz    DEBUG_NEW_API_ALIGNED_OFFSET_REALLOCF_NNZ")
l("#define valigned_mallocf_nz            DEBUG_NEW_API_VALIGNED_MALLOCF_NZ  ")
l("#define valigned_callocf_nz            DEBUG_NEW_API_VALIGNED_CALLOCF_NZ  ")
l("#define valigned_reallocf_nz           DEBUG_NEW_API_VALIGNED_REALLOCF_NZ ")
l("#define valigned_reallocf_nn           DEBUG_NEW_API_VALIGNED_REALLOCF_NN ")
l("#define valigned_reallocf_nnz          DEBUG_NEW_API_VALIGNED_REALLOCF_NNZ")
l("#define valigned_offset_mallocf_nz     DEBUG_NEW_API_VALIGNED_OFFSET_MALLOCF_NZ")
l("#define valigned_offset_callocf_nz     DEBUG_NEW_API_VALIGNED_OFFSET_CALLOCF_NZ")
l("#define valigned_offset_reallocf_nz    DEBUG_NEW_API_VALIGNED_OFFSET_REALLOCF_NZ")
l("#define valigned_offset_reallocf_nn    DEBUG_NEW_API_VALIGNED_OFFSET_REALLOCF_NN")
l("#define valigned_offset_reallocf_nnz   DEBUG_NEW_API_VALIGNED_OFFSET_REALLOCF_NNZ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_MALLOC_NZ */                              ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_FMT_ALLOC != 0 */                         ")
l("#endif /* DEBUG_NEW_CONFIG_HAVE_ALIGNED_MALLOC */                         ")
l("                                                                          ")
l("#endif /* GUARD_DEBUG_NEW_H */                                            ")
l("#else                                                                     ")
l("# error Recursion error in debug_new enable/disable \\                    ")
l("  - <"+enable_filename+"> got included without <"+disable_filename+">     ")
l("#endif                                                                    ")


cout.close()
